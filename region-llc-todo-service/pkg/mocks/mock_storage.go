// Code generated by MockGen. DO NOT EDIT.
// Source: region-llc-todo-service/pkg/db (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "region-llc-todo-service/pkg/models"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// DeleteTodoById mocks base method.
func (m *MockStorage) DeleteTodoById(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodoById", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTodoById indicates an expected call of DeleteTodoById.
func (mr *MockStorageMockRecorder) DeleteTodoById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodoById", reflect.TypeOf((*MockStorage)(nil).DeleteTodoById), arg0, arg1)
}

// GetOneTodo mocks base method.
func (m *MockStorage) GetOneTodo(arg0 context.Context, arg1 string) (models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneTodo", arg0, arg1)
	ret0, _ := ret[0].(models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneTodo indicates an expected call of GetOneTodo.
func (mr *MockStorageMockRecorder) GetOneTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneTodo", reflect.TypeOf((*MockStorage)(nil).GetOneTodo), arg0, arg1)
}

// GetTodosByFilterActive mocks base method.
func (m *MockStorage) GetTodosByFilterActive(arg0 context.Context) ([]models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodosByFilterActive", arg0)
	ret0, _ := ret[0].([]models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodosByFilterActive indicates an expected call of GetTodosByFilterActive.
func (mr *MockStorageMockRecorder) GetTodosByFilterActive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodosByFilterActive", reflect.TypeOf((*MockStorage)(nil).GetTodosByFilterActive), arg0)
}

// GetTodosByFilterDone mocks base method.
func (m *MockStorage) GetTodosByFilterDone(arg0 context.Context) ([]models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodosByFilterDone", arg0)
	ret0, _ := ret[0].([]models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodosByFilterDone indicates an expected call of GetTodosByFilterDone.
func (mr *MockStorageMockRecorder) GetTodosByFilterDone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodosByFilterDone", reflect.TypeOf((*MockStorage)(nil).GetTodosByFilterDone), arg0)
}

// InsertTodo mocks base method.
func (m *MockStorage) InsertTodo(arg0 context.Context, arg1 models.Todo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTodo", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTodo indicates an expected call of InsertTodo.
func (mr *MockStorageMockRecorder) InsertTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTodo", reflect.TypeOf((*MockStorage)(nil).InsertTodo), arg0, arg1)
}

// UpdateAsDone mocks base method.
func (m *MockStorage) UpdateAsDone(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAsDone", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAsDone indicates an expected call of UpdateAsDone.
func (mr *MockStorageMockRecorder) UpdateAsDone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAsDone", reflect.TypeOf((*MockStorage)(nil).UpdateAsDone), arg0, arg1)
}

// UpdateTodoById mocks base method.
func (m *MockStorage) UpdateTodoById(arg0 context.Context, arg1 models.Todo) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodoById", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodoById indicates an expected call of UpdateTodoById.
func (mr *MockStorageMockRecorder) UpdateTodoById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodoById", reflect.TypeOf((*MockStorage)(nil).UpdateTodoById), arg0, arg1)
}
